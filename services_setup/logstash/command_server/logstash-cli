#!/usr/bin/env bash

#
# This file is part of the eskimo project referenced at www.eskimo.sh. The licensing information below apply just as
# well to this individual file than to the Eskimo Project as a whole.
#
# Copyright 2019 - 2022 eskimo.sh / https://www.eskimo.sh - All rights reserved.
# Author : eskimo.sh / https://www.eskimo.sh
#
# Eskimo is available under a dual licensing model : commercial and GNU AGPL.
# If you did not acquire a commercial licence for Eskimo, you can still use it and consider it free software under the
# terms of the GNU Affero Public License. You can redistribute it and/or modify it under the terms of the GNU Affero
# Public License  as published by the Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# Compliance to each and every aspect of the GNU Affero Public License is mandatory for users who did no acquire a
# commercial license.
#
# Eskimo is distributed as a free software under GNU AGPL in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License along with Eskimo. If not,
# see <https://www.gnu.org/licenses/> or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA, 02110-1301 USA.
#
# You can be released from the requirements of the license by purchasing a commercial license. Buying such a
# commercial license is mandatory as soon as :
# - you develop activities involving Eskimo without disclosing the source code of your own product, software,
#   platform, use cases or scripts.
# - you deploy eskimo as part of a commercial product, platform or software.
# For more information, please contact eskimo.sh at https://www.eskimo.sh
#
# The above copyright notice and this licensing notice shall be included in all copies or substantial portions of the
# Software.
#


if [[ $@ == "" ]]; then
    echo "Expected remote server as -target_host HOST"
    exit -1;
fi

export REBUILD_ARGS=""
export LOGSTASH_HOST=""
export STDIN=""
export PROCESS_NEXT_HOST="0"
export PROCESS_NEXT_STDIN="0"
for argument in "$@"; do
    if [[ $PROCESS_NEXT_HOST == "1" ]]; then
        LOGSTASH_HOST=$argument
        export PROCESS_NEXT_HOST="0"
        export PROCESS_NEXT_STDIN="0"
    elif [[ $PROCESS_NEXT_STDIN == "1" ]]; then
        STDIN=$argument
        export PROCESS_NEXT_HOST="0"
        export PROCESS_NEXT_STDIN="0"
    else
        if [[ $argument == "-target_host" || $argument == "--target_host" ]]; then
            export PROCESS_NEXT_HOST="1"
        elif [[ $argument == "-std_in" || $argument == "--std_in" ]]; then
            export PROCESS_NEXT_STDIN="1"
        else
            export PROCESS_NEXT_HOST="0"
            export PROCESS_NEXT_STDIN="0"
            export REBUILD_ARGS="$REBUILD_ARGS $argument"
        fi
    fi
done


if [[ $LOGSTASH_HOST == "" ]]; then
    echo "Mandatory argument -target_host HOST is missing"
    exit -2
fi

echo "--------------------------------------------------------------------------------"
echo "This is a client command to a remote logstash running in a docker container."
echo "This is not the actual logstash command"
echo ""
echo "CAUTION : ONLY /var/lib/elasticsearch/logstash/data IS SHARED BETWEEN HOST AND CONTAINERS"
echo "          -> data, configuration files, etc. need to be put in this folder"
echo ""
echo "CAUTION : stdin piping is implemented using the -std_in argument where a file"
echo "needs to be passed"
echo ""
echo "Arguments will be passed to a call to logstash in the logstash container."
echo " - Target host : $LOGSTASH_HOST"
echo " - STDIN : $STDIN"
echo " - Arguments   : $REBUILD_ARGS"
echo "--------------------------------------------------------------------------------"


#echo $LOGSTASH_HOST
#echo $REBUILD_ARGS

rm -f /tmp/call_result.log
rm -f /tmp/call_out.log
rm -f /tmp/call_error.log

if [[ $STDIN == "" ]]; then
    curl -w "HTTP_CODE=%{http_code}" -XPOST "http://$LOGSTASH_HOST:28999/" -d "$REBUILD_ARGS" \
        -o /tmp/call_result.log \
        >/tmp/call_out.log \
        2>/tmp/call_error.log
else
    curl -w "HTTP_CODE=%{http_code}" -H "stdin_file: $STDIN"  -XPOST "http://$LOGSTASH_HOST:28999/" -d "$REBUILD_ARGS" \
        -o /tmp/call_result.log \
        >/tmp/call_out.log \
        2>/tmp/call_error.log
fi


#cat /tmp/call_out.log | grep -v HTTP_CODE

eval `cat /tmp/call_out.log | grep HTTP_CODE`
if [[ $HTTP_CODE != "200" ]]; then
    echo "!! logstash command server called failed !!"
    echo "--------------------------------------------------------------------------------"
    cat /tmp/call_error.log
    cat /tmp/call_result.log
    exit -1
else
    echo "- logstash command server called suceeded. Result displayed hereunder."
    echo "--------------------------------------------------------------------------------"
    cat /tmp/call_result.log
    exit 0
fi