{
  "paragraphs": [
    {
      "text": "%md\n# Flink Streaming Demo\n\n**This notebook shows three eamples of Flink Streaming processing, from a simple one to a more elaborated one**\n\n* First Streaming example : a simple word count on a file on the filesystem\n* Second streaming example : reading a stream from a socket\n* Third Streaming Example : a complete application simulating Stock Quotes Processing",
      "user": "anonymous",
      "dateUpdated": "2019-12-30T08:40:52+0000",
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Flink Streaming Demo</h1>\n<p><strong>This notebook shows three eamples of Flink Streaming processing, from a simple one to a more elaborated one</strong></p>\n<ul>\n<li>First Streaming example : a simple word count on a file on the filesystem</li>\n<li>Second streaming example : reading a stream from a socket</li>\n<li>Third Streaming Example : a complete application simulating Stock Quotes Processing</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1577695176521_-1119571398",
      "id": "paragraph_1577695176521_-1119571398",
      "dateCreated": "2019-12-30T08:39:36+0000",
      "dateStarted": "2019-12-30T08:40:52+0000",
      "dateFinished": "2019-12-30T08:40:52+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:7448"
    },
    {
      "text": "%md\n\n## 1. First Streaming example : a simple word count on a file on the filesystem\n\nIn this simple example in scala, we'll use flink to get a DataStream on a file on the filesystem and compute a word count.\nThe different words and the number of their occurence are then printed on stdout.\n\n*Caution : stdout is relative to the flink worker process.*\nIn order to see the stdout, one needs to use the mesos console to find the task manager execution process on the mesos agent.\nThen one can use the mesos console to see the stdout file on that mesos-agent.\n\nThis program starts, reads the file, dumps the counts on stdout and stops (there is no need to stop it from Flink App Master)",
      "user": "anonymous",
      "dateUpdated": "2019-12-30T08:41:18+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>1. First Streaming example : a simple word count on a file on the filesystem</h2>\n<p>In this simple example in scala, we&rsquo;ll use flink to get a DataStream on a file on the filesystem and compute a word count.<br />\nThe different words and the number of their occurence are then printed on stdout.</p>\n<p><em>Caution : stdout is relative to the flink worker process.</em><br />\nIn order to see the stdout, one needs to use the mesos console to find the task manager execution process on the mesos agent.<br />\nThen one can use the mesos console to see the stdout file on that mesos-agent.</p>\n<p>This program starts, reads the file, dumps the counts on stdout and stops (there is no need to stop it from Flink App Master)</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574438061438_1476363734",
      "id": "paragraph_1574438061438_1476363734",
      "dateCreated": "2019-11-22T15:54:21+0000",
      "dateStarted": "2019-12-30T08:41:18+0000",
      "dateFinished": "2019-12-30T08:41:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7449"
    },
    {
      "text": "%flink\n\nimport org.apache.flink.streaming.api.functions.sink.PrintSinkFunction;\nimport org.apache.flink.api.java.utils.ParameterTool\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.streaming.api.scala.DataStreamUtils\nimport scala.collection.JavaConverters.asScalaIteratorConverter\n\nsenv.setParallelism(1);\n\n// get input data\nval text = senv.readTextFile(\"/etc/profile\")\n\n//val counts: DataStream[(String, Int)] = text\nval counts: DataStream[(String, Int)] = text\n    .flatMap(_.toLowerCase.split(\"\\\\W+\"))\n    .filter(_.nonEmpty)\n    .map((_, 1))\n    .keyBy(0) // group by the tuple field \"0\" and sum up tuple field \"1\"\n    .sum(1)\n\n// CAUTION : look at your mesos-slave task-manager console stdout to find this output !\ncounts.print()\n\n// execute program\nsenv.execute(\"Streaming WordCount\")\n\nSystem.out.println (\"Look at stdout on the mesos-agent task manager process to see the output\")",
      "user": "anonymous",
      "dateUpdated": "2019-11-22T16:31:39+0000",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.flink.streaming.api.functions.sink.PrintSinkFunction\nimport org.apache.flink.api.java.utils.ParameterTool\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.streaming.api.scala.DataStreamUtils\nimport scala.collection.JavaConverters.asScalaIteratorConverter\n\u001b[1m\u001b[34mtext\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.streaming.api.scala.DataStream[String]\u001b[0m = org.apache.flink.streaming.api.scala.DataStream@2423fdeb\n\u001b[1m\u001b[34mcounts\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.streaming.api.scala.DataStream[(String, Int)]\u001b[0m = org.apache.flink.streaming.api.scala.DataStream@3d4f36ad\n\u001b[1m\u001b[34mres12\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.streaming.api.datastream.DataStreamSink[(String, Int)]\u001b[0m = org.apache.flink.streaming.api.datastream.DataStreamSink@6620f5ad\n\u001b[1m\u001b[34mres14\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.api.common.JobExecutionResult\u001b[0m = org.apache.flink.api.common.JobExecutionResult@6dffe871\nLook at the stdount on the mesos-agent task manager process to see the output\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574438249993_-368265077",
      "id": "paragraph_1574438249993_-368265077",
      "dateCreated": "2019-11-22T15:57:29+0000",
      "dateStarted": "2019-11-22T15:59:17+0000",
      "dateFinished": "2019-11-22T15:59:19+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7450"
    },
    {
      "text": "%md \n\n## 2. Second streaming example : reading a stream from a socket\n\nIn this simple example, we’ll use flink to read a DataStream from a socket and compute a word count from this stream.\nIt is very similar to the example abobe except that we'll make it a little more elaborated by typing the Stream data with a custom class.\nThe word count will be dumped on stdout just as above. (Caution : stdout is relative to the flink worker process, use mesos console to show stdout of mesos-agent task manager process)\n\n**The next paragraph** starts a netcat that servces on the configured process and sends the passed string.\n**The paragraph after** starts the flink program which will be running forever and reading on the server socket created by netcat.\n\n**IMPORTANT NOTES:**\n\n- One needs to look at the mesos-agent stdout to see the result output\n- **One needs to replace _192.168.10.15_ by the external IP address of the zeppelin host **",
      "user": "anonymous",
      "dateUpdated": "2020-04-13T16:46:11+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>2. Second streaming example : reading a stream from a socket</h2>\n<p>In this simple example, we’ll use flink to read a DataStream from a socket and compute a word count from this stream.<br />\nIt is very similar to the example abobe except that we&rsquo;ll make it a little more elaborated by typing the Stream data with a custom class.<br />\nThe word count will be dumped on stdout just as above. (Caution : stdout is relative to the flink worker process, use mesos console to show stdout of mesos-agent task manager process)</p>\n<p><strong>The next paragraph</strong> starts a netcat that servces on the configured process and sends the passed string.<br />\n<strong>The paragraph after</strong> starts the flink program which will be running forever and reading on the server socket created by netcat.</p>\n<p><strong>IMPORTANT NOTES:</strong></p>\n<ul>\n<li>One needs to look at the mesos-agent stdout to see the result output</li>\n<li>**One needs to replace <em>192.168.10.15</em> by the external IP address of the zeppelin host **</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574438280346_-2132319253",
      "id": "paragraph_1574438280346_-2132319253",
      "dateCreated": "2019-11-22T15:58:00+0000",
      "dateStarted": "2020-04-13T16:46:09+0000",
      "dateFinished": "2020-04-13T16:46:10+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7451"
    },
    {
      "text": "%sh\nrm /tmp/output\n\necho \"Testing just a few words to see what we get. Adding one sentence to get a few more words\" > /tmp/output\n\n# use killall netcat in another sh paragraph if you need to kill this\ncat /tmp/output | netcat -s 192.168.10.13 -l -p 19876 ",
      "user": "anonymous",
      "dateUpdated": "2020-04-13T16:42:17+0000",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sh",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574440108016_12953121",
      "id": "paragraph_1574440108016_12953121",
      "dateCreated": "2019-11-22T16:28:28+0000",
      "dateStarted": "2020-04-13T16:42:17+0000",
      "dateFinished": "2020-04-13T16:42:52+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7452",
      "results": {
        "code": "SUCCESS",
        "msg": []
      }
    },
    {
      "text": "%flink\n\nimport org.apache.flink.streaming.api.windowing.time.Time;\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.streaming.api.windowing.windows.Window\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\nimport org.apache.flink.streaming.api.windowing.assigners._\nimport org.apache.flink.util.Collector\n\n\n/** Data type for words with count */\nclass WordWithCount2(var word: String, var count: Long) extends Comparable[WordWithCount2] {\n    def compareTo(other: WordWithCount2) = word compareTo other.word\n    // Overriding tostring method \n    override def toString() : String = { \n          \n        return \"[word : \" + word +  \n                \", count = \" + count+\"]\"; \n    } \n}\n\n\nsenv.setParallelism(1);\n\n//SocketWindowWordCount.main(Array())\n\n// the host and the port to connect to\nvar hostname: String = \"192.168.10.13\"\nvar port: Int = 19876\n\n// get input data by connecting to the socket\nval text: DataStream[String] = senv.socketTextStream(hostname, port, '\\n')\n\n// parse the data, group it, window it, and aggregate the counts\nval windowCounts: DataStream[WordWithCount2] = text\n      .flatMap { w => w.split(\"\\\\s\") }\n      .map { w => new WordWithCount2(w, 1) }\n      .keyBy(w => w.word)\n      .window(TumblingProcessingTimeWindows.of(Time.seconds(5)))\n      .apply {\n            (\n                key: String,\n                window: TimeWindow,\n                allWordWithCount: Iterable[WordWithCount2],\n                out: Collector[WordWithCount2]\n            ) => {\n                var sum: Long = 0\n                for (wwc <- allWordWithCount) {\n                    sum += wwc.count;\n                }\n                out.collect (new WordWithCount2(key, sum))\n            }\n       }\n\n// print the results with a single thread, rather than in parallel\nwindowCounts.print()\n\nsenv.execute(\"Socket Window WordCount\")",
      "user": "anonymous",
      "dateUpdated": "2020-04-13T16:42:20+0000",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.flink.streaming.api.windowing.time.Time\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.streaming.api.windowing.windows.Window\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\nimport org.apache.flink.streaming.api.windowing.assigners._\nimport org.apache.flink.util.Collector\ndefined class WordWithCount2\n\u001b[1m\u001b[34mhostname\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = 192.168.10.13\n\u001b[1m\u001b[34mport\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 19876\n\u001b[1m\u001b[34mtext\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.streaming.api.scala.DataStream[String]\u001b[0m = org.apache.flink.streaming.api.scala.DataStream@fb0e0a9\n\u001b[1m\u001b[34mwindowCounts\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.streaming.api.scala.DataStream[WordWithCount2]\u001b[0m = org.apache.flink.streaming.api.scala.DataStream@1c2c0e51\n\u001b[1m\u001b[34mres16\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.streaming.api.datastream.DataStreamSink[WordWithCount2]\u001b[0m = org.apache.flink.streaming.api.datastream.DataStreamSink@258bef2f\norg.apache.flink.client.program.ProgramInvocationException: Job failed (JobID: 327dfad05561e006d174271c975d0bce)\n  at org.apache.flink.client.deployment.ClusterClientJobClientAdapter.lambda$null$6(ClusterClientJobClientAdapter.java:112)\n  at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)\n  at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)\n  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n  at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n  at org.apache.flink.client.program.rest.RestClusterClient.lambda$pollResourceAsync$21(RestClusterClient.java:565)\n  at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n  at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n  at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n  at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:291)\n  at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n  at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n  at java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:575)\n  at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:943)\n  at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n  at java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.flink.runtime.client.JobCancellationException: Job was cancelled.\n  at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:149)\n  at org.apache.flink.client.deployment.ClusterClientJobClientAdapter.lambda$null$6(ClusterClientJobClientAdapter.java:110)\n  ... 19 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "FLINK JOB",
          "tooltip": "View in Flink web UI",
          "group": "flink",
          "values": [
            {
              "jobUrl": "http://192.168.10.13:8081#/job/327dfad05561e006d174271c975d0bce",
              "$$hashKey": "object:8536"
            }
          ],
          "interpreterSettingId": "flink"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574439353003_390362073",
      "id": "paragraph_1574439353003_390362073",
      "dateCreated": "2019-11-22T16:15:53+0000",
      "dateStarted": "2020-04-13T16:42:20+0000",
      "dateFinished": "2020-04-13T16:42:53+0000",
      "status": "ABORT",
      "$$hashKey": "object:7453"
    },
    {
      "text": "%sh\n\n# Stop the netcat program from first paragraph\nkillall netcat\n\n# Notes :\n# - the flink streaming process needs to be stopped from Flink App Master\n# - the netcat program from first paragraph can be tested with netcat 192.168.10.15 19876",
      "user": "anonymous",
      "dateUpdated": "2019-11-22T16:54:57+0000",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sh",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574440172704_-1385401400",
      "id": "paragraph_1574440172704_-1385401400",
      "dateCreated": "2019-11-22T16:29:32+0000",
      "dateStarted": "2019-11-22T16:51:34+0000",
      "dateFinished": "2019-11-22T16:51:34+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7454"
    },
    {
      "text": "%sh\n\nnetcat 192.168.10.13 19876\n",
      "user": "anonymous",
      "dateUpdated": "2020-04-13T16:33:06+0000",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sh",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Testing just a few words to see what we get. Adding one sentence to get a few more words\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574440444877_-763678973",
      "id": "paragraph_1574440444877_-763678973",
      "dateCreated": "2019-11-22T16:34:04+0000",
      "dateStarted": "2019-11-22T16:46:57+0000",
      "dateFinished": "2019-11-22T16:47:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7455"
    },
    {
      "text": "%md\n\n## 3. Third Streaming Example : a complete application simulating Stock Quotes Processing\n\nThis third example is a rather complete application where we're going to use Flink Streaming ro process Stock Quotes and compute statistics.\n\nThis program first defined a custom SourceFunction class that generates random stock quotes periodically.\nThe program then registers a processing logic on this feed of stock quotes to compute the average quote for each stock per period of 5 seconds.\n\n*Note:*\n\n- One needs to look at the mesos-agent stdout to see the result output\n",
      "user": "anonymous",
      "dateUpdated": "2020-04-13T16:45:30+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>3. Third Streaming Example : a complete application simulating Stock Quotes Processing</h2>\n<p>This third example is a rather complete application where we&rsquo;re going to use Flink Streaming ro process Stock Quotes and compute statistics.</p>\n<p>This program first defined a custom SourceFunction class that generates random stock quotes periodically.<br />\nThe program then registers a processing logic on this feed of stock quotes to compute the average quote for each stock per period of 5 seconds.</p>\n<p><em>Note:</em></p>\n<ul>\n<li>One needs to look at the mesos-agent stdout to see the result output</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574441148828_-630387092",
      "id": "paragraph_1574441148828_-630387092",
      "dateCreated": "2019-11-22T16:45:48+0000",
      "dateStarted": "2020-04-13T16:45:24+0000",
      "dateFinished": "2020-04-13T16:45:26+0000",
      "status": "FINISHED",
      "$$hashKey": "object:7456"
    },
    {
      "text": "%flink\n\nimport scala.util.Random\n\nimport org.apache.flink.streaming.api.scala._\n\nimport org.apache.flink.api.common.typeinfo.TypeInformation\nimport org.apache.flink.streaming.api.functions.source.SourceFunction\nimport org.apache.flink.streaming.api.functions.source.SourceFunction.SourceContext\n\nimport org.apache.flink.streaming.api.windowing.windows.Window\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\nimport org.apache.flink.streaming.api.windowing.time.Time;\n\nimport org.apache.flink.streaming.api.functions.sink.SocketClientSink\nimport org.apache.flink.streaming.util.serialization.{SimpleStringSchema, SerializationSchema}\nimport org.apache.flink.streaming.api.windowing.assigners.SlidingProcessingTimeWindows\n\nimport org.apache.flink.streaming.api.TimeCharacteristic\n\nimport org.apache.flink.util.Collector\n\nimport java.beans.Transient\nimport java.util.concurrent.TimeUnit\nimport java.util.concurrent.TimeUnit._\n\n\ncase class StockPrice(symbol: String, price: Double, eventTime: Long) extends Serializable\n\nclass StockSourceFunction(symbol: String, basePrice: Double, sigma: Int) extends SourceFunction[StockPrice]() with Serializable{\n    var price = basePrice\n    @Transient lazy val rand = new Random()\n\n    var isRunning:Boolean = true\n\n    override def run(ctx: SourceContext[StockPrice]) = {\n        while (isRunning) {\n            val rnd = Random.nextGaussian\n\n            price = if(price + rnd * sigma < 0)\n                price + rnd * sigma * -1 // Make it positive as we don't want any negative prices :-)\n            else\n                price + rnd * sigma\n\n            Thread.sleep(Random.nextInt(200))\n\n            val stock = StockPrice(symbol, price, System.currentTimeMillis)\n\n            ctx.collect(stock)\n        }\n    }\n\n    override def cancel(): Unit = isRunning = false\n}\n\nclass StockDemo extends Serializable {\n\n    val zeppelin = \"zeppelin\"\n    val NEWLINE = 0x0A.toByte\n    val TAB = 0x09.toByte\n\n    val symbols = List(\"SPX\", \"FTSE\", \"DJI\", \"DJT\", \"BUX\", \"DAX\", \"GOOG\", \"AAPL\", \"FB\")\n\n    def sumTuple(x: (Double, Int), y: (Double, Int)): (Double, Int) = (x._1 + y._1, x._2 + y._2)\n\n    implicit val typeInfoStockPrice = TypeInformation.of(classOf[StockPrice])\n    implicit val typeInfoString = TypeInformation.of(classOf[String])\n\n    @Transient lazy val stockStream = senv.addSource(new StockSourceFunction(\"SPX\", 20, 10)).union(\n        senv.addSource(new StockSourceFunction(\"FTSE\", 50, 20)),\n        senv.addSource(new StockSourceFunction(\"GOOG\", 100, 30)),\n        senv.addSource(new StockSourceFunction(\"FB\", 42, 22)),\n        senv.addSource(new StockSourceFunction(\"AAPL\", 140, 40))\n    ).assignAscendingTimestamps( _.eventTime )\n\n    @Transient lazy val schema: SerializationSchema[StockPrice] = new SerializationSchema[StockPrice]() {\n        override def serialize(sp: StockPrice): Array[Byte] = {\n            val tempString = sp.symbol + \"\\t\" + sp.eventTime.toString + \"\\t\" + sp.price.toString + \"\\n\"\n            tempString.getBytes()\n        }\n    }\n\n    def main(args: Array[String]) {\n\n        senv.setParallelism(1);\n\n        senv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n        // Let0s compute the average of the stock prices per period of 5 seconds\n        stockStream\n            .keyBy(_.symbol)\n            .window(SlidingProcessingTimeWindows.of(Time.seconds(10), Time.seconds(5)))\n            .apply {\n                (\n                    key: String,\n                    window: TimeWindow,\n                    stockPrices: Iterable[StockPrice],\n                    out: Collector[StockPrice]\n                ) => {\n                    val (total, count) = stockPrices.map(sp => (sp.price, 1)).reduceLeft(sumTuple)\n                    out.collect( StockPrice(key, total / count.toDouble, window.getEnd ) )\n                }\n               }\n            .print()\n\n        // -- alternatively, instead of .print() above, one could use :\n        //    .writeToSocket(zeppelin, 4444, schema)\n        // -- in which case you might want to run the following code in another paragraph:\n        //    in order to get the result back to zeppelin\n        /*\n            %sh\n            rm /tmp/output\n            echo -e 'Symbol\\tRecieved\\tValue\\n' > /tmp/output\n            netcat -l -p 4444 >> /tmp/output\n        */\n\n        senv.execute(\"SimpleStockStreamer\")\n\n    }\n\n}\n\nnew StockDemo().main(Array())\n",
      "user": "anonymous",
      "dateUpdated": "2020-04-13T16:43:29+0000",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "import scala.util.Random\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.api.common.typeinfo.TypeInformation\nimport org.apache.flink.streaming.api.functions.source.SourceFunction\nimport org.apache.flink.streaming.api.functions.source.SourceFunction.SourceContext\nimport org.apache.flink.streaming.api.windowing.windows.Window\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\nimport org.apache.flink.streaming.api.windowing.time.Time\nimport org.apache.flink.streaming.api.functions.sink.SocketClientSink\nimport org.apache.flink.streaming.util.serialization.{SimpleStringSchema, SerializationSchema}\nimport org.apache.flink.streaming.api.windowing.assigners.SlidingProcessingTimeWindows\nimport org.apache.flink.streaming.api.TimeCharacteristic\nimport org.apache.flink.util.Collector\nimport java.beans.Transient\nimport java.util.concurrent.TimeUnit\nimport java.util.concurrent.TimeUnit._\ndefined class StockPrice\ndefined class StockSourceFunction\n\u001b[33mwarning: \u001b[0mthere were two deprecation warnings; re-run with -deprecation for details\ndefined class StockDemo\norg.apache.flink.client.program.ProgramInvocationException: Job failed (JobID: e42d76e04e22cf38f58760395ff54013)\n  at org.apache.flink.client.deployment.ClusterClientJobClientAdapter.lambda$null$6(ClusterClientJobClientAdapter.java:112)\n  at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)\n  at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)\n  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n  at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n  at org.apache.flink.client.program.rest.RestClusterClient.lambda$pollResourceAsync$21(RestClusterClient.java:565)\n  at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n  at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n  at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n  at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:291)\n  at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n  at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n  at java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:575)\n  at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:943)\n  at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n  at java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.flink.runtime.client.JobCancellationException: Job was cancelled.\n  at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:149)\n  at org.apache.flink.client.deployment.ClusterClientJobClientAdapter.lambda$null$6(ClusterClientJobClientAdapter.java:110)\n  ... 19 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "FLINK JOB",
          "tooltip": "View in Flink web UI",
          "group": "flink",
          "values": [
            {
              "jobUrl": "http://192.168.10.13:8081#/job/e42d76e04e22cf38f58760395ff54013",
              "$$hashKey": "object:8602"
            }
          ],
          "interpreterSettingId": "flink"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574441970213_-314054068",
      "id": "paragraph_1574441970213_-314054068",
      "dateCreated": "2019-11-22T16:59:30+0000",
      "dateStarted": "2020-04-13T16:43:29+0000",
      "dateFinished": "2020-04-13T16:44:27+0000",
      "status": "ABORT",
      "$$hashKey": "object:7457"
    },
    {
      "text": "%flink\n",
      "user": "anonymous",
      "dateUpdated": "2019-11-22T16:59:54+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1574441994070_-2086643936",
      "id": "paragraph_1574441994070_-2086643936",
      "dateCreated": "2019-11-22T16:59:54+0000",
      "status": "READY",
      "$$hashKey": "object:7458"
    }
  ],
  "name": "Flink Streaming Demo",
  "id": "2EWADUKS5",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Flink Streaming Demo",
  "checkpoint": {
    "message": "test"
  }
}