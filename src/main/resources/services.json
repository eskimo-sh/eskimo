{

  "ntp" : {
    "config": {
      "imageName" : "ntp",
      "order": 0,
      "mandatory": true,
      "name" : "NTP",
      "selectionLayout" : { "row" : 1, "col" : 1},
      "memory": "neglectable",
      "logo" : "images/ntp-logo.png",
      "icon" : "images/ntp-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "ntp",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "cat /var/log/ntp/ntp.log",
        "icon": "fa-file"
      }
    ]
  },



  "zookeeper": {
    "config": {
      "imageName" : "zookeeper",
      "order": 1,
      "unique": true,
      "name" : "Zookeeper",
      "selectionLayout" : { "row" : 1, "col" : 2},
      "memory": "small",
      "logo" : "images/zookeeper-logo.png",
      "icon" : "images/zookeeper-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "zookeeper",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "additionalEnvironment": [ "SERVICE_NUMBER_1_BASED" ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "cat /var/log/zookeeper/zookeeper.log",
        "icon": "fa-file"
      }
    ]
  },



  "prometheus" : {
    "config": {
      "imageName" : "prometheus",
      "order": 2,
      "mandatory": true,
      "group" : "Monitoring",
      "name" : "Prometheus",
      "selectionLayout" : { "row" : 3, "col" : 1},
      "memory": "neglectable",
      "logo" : "images/prometheus-logo.png",
      "icon" : "images/prometheus-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "prometheus",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "additionalEnvironment": [
      "ALL_NODES_LIST_prometheus"
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "cat /var/log/prometheus/prometheus.log",
        "icon": "fa-file"
      }
    ]
  },



  "grafana" : {
    "config": {
      "imageName" : "grafana",
      "order": 3,
      "unique": true,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "0.3",
          "ram": "400M"
        }
      },
      "group" : "Monitoring",
      "name" : "Grafana",
      "memory": "small",
      "logo" : "images/grafana-logo.png",
      "icon" : "images/grafana-icon.png"
    },
    "ui": {
      "proxyTargetPort" : 31300,
      "waitTime": 5000,
      "title" : "Grafana Monitoring",
      "role" : "*",
      "statusPageLinktitle" : "Access all monitoring dashboards in Grafana",
      "proxyReplacements" : [
        {
          "type" : "PLAIN",
          "source" : "{PREFIX_PATH}/{PREFIX_PATH}",
          "target" : "{PREFIX_PATH}"
        },
        {
          "comment": "for whatever reason, I need to replace this without grafana. The thing is that I am not the one putting it ?!?",
          "type" : "PLAIN",
          "source" : "{CONTEXT_PATH}api/v1",
          "target" : "api/v1"
        },
        {
          "comment": "for whatever reason, I need to replace this without grafana. The thing is that I am not the one putting it ?!?",
          "type" : "PLAIN",
          "source" : "{PREFIX_PATH}/api/v1",
          "target" : "api/v1"
        },
        {
          "type" : "PLAIN",
          "source" : "this._websocket(this._url)",
          "target" : "this._websocket(this._url.replace(\"ws://localhost:9191/grafana\", \"ws://localhost:9191/ws/grafana\"))"
        },
        {
          "type" : "PLAIN",
          "source" : "prometheus/api",
          "target" : "prometheus/grafana/api"
        }
      ]
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "prometheus",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "editableSettings": [
      {
        "filename": "defaults.ini",
        "filesystemService": "grafana",
        "propertyType": "variable",
        "propertyFormat": "{name} = {value}",
        "commentPrefix": "#",
        "properties": [
          {
            "name": "admin_user",
            "comment": "Login Name of the Grafana admin user within eskimo\n<strong>CAN ONLY BE CHANGED BEFORE FIRST START OF GRAFANA</strong>",
            "defaultValue": "eskimo"
          },
          {
            "name": "admin_password",
            "comment": "Login Password of the Grafana admin user within eskimo\n<strong>CAN ONLY BE CHANGED BEFORE FIRST START OF GRAFANA</strong>",
            "defaultValue": "eskimo"
          }
        ]
      }
    ],
    "additionalEnvironment": [ "CONTEXT_PATH" ]
  },



  "gluster" : {
    "config": {
      "imageName" : "gluster",
      "order": 4,
      "mandatory": true,
      "name" : "Gluster / EGMI",
      "selectionLayout" : { "row" : 2, "col" : 1},
      "memory": "neglectable",
      "logo" : "images/gluster-logo.png",
      "icon" : "images/gluster-icon.png"
    },
    "ui": {
      "urlTemplate": "./gluster/{NODE_ADDRESS}/egmi/app.html",
      "proxyTargetPort": 28901,
      "waitTime": 10000,
      "role" : "ADMIN",
      "title": "Gluster Dashboard",
      "statusPageLinktitle": "Monitor Gluster volumes"
    },
    "masterDetection": {
      "strategy" : "LOG_FILE",
      "logFile" : "/var/log/gluster/egmi/egmi.log",
      "grep": "I am the new leader",
      "timeStampExtractRexp" : "([0-9\\-]+ [0-9.:,]+).*",
      "timeStampFormat" : "yyyy-MM-dd HH:mm:ss,SSS"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "zookeeper",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "additionalEnvironment": [
      "ALL_NODES_LIST_gluster"
    ],
    "editableSettings": [
      {
        "filename": "egmi.properties",
        "filesystemService": "egmi",
        "propertyType": "variable",
        "propertyFormat": "{name}={value}",
        "commentPrefix": "#",
        "properties": [
          {
            "name": "target.volumes",
            "comment": "The volumes to be automagically managed by EGMI.",
            "defaultValue": "",
            "value": "spark_eventlog,spark_data,flink_data,flink_completed_jobs,logstash_data,kubernetes_registry,kubernetes_ssl"
          }
        ]
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show GlusterFS Logs",
        "command": "sudo cat /var/log/gluster/glusterfs.log",
        "icon": "fa-file"
      },
      {
        "id" : "show_remote_log",
        "name" : "Show Remote Server Logs",
        "command": "cat /var/log/gluster/gluster_remote-log",
        "icon": "fa-file"
      }
    ]
  },


  "etcd": {
    "config": {
      "order": 5,
      "group" : "Kubernetes",
      "name" : "Etcd",
      "selectionLayout" : { "row" : 4, "col" : 1},
      "memory": "neglectable",
      "logo" : "images/kube-master-logo.png",
      "icon" : "images/kube-master-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "SAME_NODE",
        "masterService": "gluster",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": true
      }
    ],
    "additionalEnvironment": [
      "ALL_NODES_LIST_etcd",
      "SERVICE_NUMBER_1_BASED"
    ]
  },


  "kube-master": {
    "config": {
      "imageName" : "kube-master",
      "order": 6,
      "unique": true,
      "group" : "Kubernetes",
      "name" : "Master",
      "selectionLayout" : { "row" : 2, "col" : 2},
      "memory": "neglectable",
      "logo" : "images/kube-master-logo.png",
      "icon" : "images/kube-master-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "SAME_NODE",
        "masterService": "gluster",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": true
      },
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "kube-master",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "SAME_NODE",
        "masterService": "etcd",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ]
  },


  "kube-slave": {
    "config": {
      "order": 7,
      "group" : "Kubernetes",
      "name" : "Slave",
      "selectionLayout" : { "row" : 5, "col" : 1},
      "memory": "NEGLECTABLE",
      "logo" : "images/kube-slave-logo.png",
      "icon" : "images/kube-slave-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "kube-master",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "SAME_NODE",
        "masterService": "gluster",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "SAME_NODE",
        "masterService": "etcd",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ],
    "additionalEnvironment": [
      "ALL_NODES_LIST_kube-slave",
      "SERVICE_NUMBER_1_BASED"
    ]
  },



  "kubernetes-dashboard" : {
    "config": {
      "imageName" : "kubernetes-dashboard",
      "order": 8,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "0.3",
          "ram": "500M"
        }
      },
      "unique": true,
      "group" : "Kubernetes",
      "name" : "Dashboard",
      "memory": "small",
      "logo" : "images/kube-master-logo.png",
      "icon" : "images/kube-master-icon.png"
    },
    "ui": {
      "__comment_urlTemplate": "Going through Kubectl proxy.",
      "urlTemplate": "kubernetes-dashboard/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/workloads?namespace=_all",
      "__comment_proxyTargetPort": "Kubectl proxy target port",
      "proxyTargetPort" : 8001,
      "waitTime": 5000,
      "role" : "*",
      "title" : "Kubernetes Dashboard",
      "statusPageLinktitle" : "Manage Kubernetes Cluster"
    }
  },



  "kafka" : {
    "config": {
      "imageName" : "kafka",
      "order": 9,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "1",
          "ram": "1G"
        }
      },
      "group" : "Kafka",
      "name" : "Broker",
      "memory": "medium",
      "logo" : "images/kafka-logo.png",
      "icon" : "images/kafka-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "zookeeper",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "ALL_NODES",
        "masterService": "kube-slave",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "editableSettings": [
      {
        "filename": "server.properties",
        "filesystemService": "kafka",
        "propertyType": "variable",
        "propertyFormat": "{name}={value}",
        "commentPrefix": "#",
        "properties": [
          {
            "name": "num.network.threads",
            "comment": "The number of threads that the server uses for receiving requests from the network and sending responses to the network",
            "defaultValue": "3"
          },
          {
            "name": "num.io.threads",
            "comment": "The number of threads that the server uses for processing requests, which may include disk I/O",
            "defaultValue": "8"
          },
          {
            "name": "socket.send.buffer.bytes",
            "comment": "The send buffer (SO_SNDBUF) used by the socket server",
            "defaultValue": "102400"
          },
          {
            "name": "socket.receive.buffer.bytes",
            "comment": "The receive buffer (SO_RCVBUF) used by the socket server",
            "defaultValue": "102400"
          },
          {
            "name": "socket.request.max.bytes",
            "comment": "The maximum size of a request that the socket server will accept (protection against OOM)",
            "defaultValue": "104857600"
          },
          {
            "name": "num.partitions",
            "comment": "The default number of log partitions per topic. More partitions allow greater parallelism for consumption, but this will also result in more files across the brokers.",
            "defaultValue": "1"
          },
          {
            "name": "log.retention.hours",
            "comment": "The minimum age of a log file to be eligible for deletion due to age",
            "defaultValue": "168"
          }
        ]
      }
    ],
    "commands" : [
      {
        "id" : "show_server_log",
        "name" : "Show Server Logs",
        "command": "cat /var/log/kafka/server.log",
        "icon": "fa-file"
      },
      {
        "id" : "show_controller_log",
        "name" : "Show Controller Logs",
        "command": "cat /var/log/kafka/controller.log",
        "icon": "fa-file"
      },
      {
        "id" : "show_state_change_log",
        "name" : "Show State Change Logs",
        "command": "cat /var/log/kafka/state-change.log",
        "icon": "fa-file"
      }
    ]
  },



  "kafka-cli" : {
    "config": {
      "order": 10,
      "group": "Kafka",
      "name": "Client",
      "selectionLayout": {
        "row": 2,
        "col": 3
      },
      "memory": "neglectable",
      "logo" : "images/kafka-logo.png",
      "icon" : "images/kafka-icon.png"
    }
  },



  "kafka-manager": {
    "config": {
      "imageName" : "kafka-manager",
      "order": 11,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "0.3",
          "ram": "400M"
        }
      },
      "unique": true,
      "group" : "Kafka",
      "name" : "Manager",
      "memory": "small",
      "logo" : "images/kafka-manager-logo.png",
      "icon" : "images/kafka-manager-icon.png"
    },
    "ui": {
      "__comment_urlTemplate": "Going through Kubectl proxy.",
      "urlTemplate": "kafka-manager/api/v1/namespaces/default/services/kafka-manager:31220/proxy/",
      "__comment_proxyTargetPort": "Kubectl proxy target port",
      "proxyTargetPort" : 8001,
      "waitTime": 6000,
      "role" : "ADMIN",
      "title" : "Kafka manager",
      "statusPageLinktitle" : "Manage your kafka topics",
      "proxyReplacements" : [
        {
          "type" : "PLAIN",
          "source" : "{PREFIX_PATH}/{PREFIX_PATH}",
          "target" : "{PREFIX_PATH}"
        }
      ]
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "zookeeper",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "kafka",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "cat /var/log/kafka/kafka-manager/application.log",
        "icon": "fa-file"
      }
    ]
  },



  "spark-history-server" : {
    "config": {
      "imageName" : "spark",
      "order": 12,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "0.3",
          "ram": "400M"
        }
      },
      "unique": true,
      "group" : "Spark",
      "name" : "Console",
      "memory": "small",
      "logo" : "images/spark-history-server-logo.png",
      "icon" : "images/spark-history-server-icon.png"
    },
    "ui": {
      "proxyTargetPort" : 31811,
      "waitTime": 5000,
      "role" : "*",
      "title" : "Spark Console",
      "statusPageLinktitle" : "Monitor your Spark jobs",
      "proxyReplacements" : [
        {
          "type" : "PLAIN",
          "source" : "uiRoot + \"/history/\"",
          "target": "uiRoot + \"/{PREFIX_PATH}/history/\"",
          "__target" : "uiroot}}/history"
        },
        {
          "type" : "PLAIN",
          "source" : "newBaseURI = words.slice(0, words.indexOf(\"history\")).join('/');",
          "target": "newBaseURI = words.slice(0, words.indexOf(\"history\") - 1).join('/');"
        },
        {
          "type" : "PLAIN",
          "source" : "newBaseURI = words.slice(0, ind).join('/');",
          "target": "newBaseURI = words.slice(0, ind - 1).join('/');"
        }
      ]
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "gluster",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": true
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "sudo cat /var/log/spark/logs/`ls -t /var/log/spark/logs/ | grep HistoryServer | head -n 1`",
        "icon": "fa-file"
      }
    ]
  },



  "spark-runtime" : {
    "config": {
      "imageName" : "spark",
      "order": 13,
      "group" : "Spark",
      "name" : "Runtime",
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "1",
          "ram": "800M"
        }
      },
      "registryOnly": true,
      "memory": "large",
      "logo" : "images/spark-runtime-logo.png",
      "icon" : "images/spark-runtime-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "kube-master",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ],
    "editableSettings": [
      {
        "filename": "spark-defaults.conf",
        "propertyType": "variable",
        "propertyFormat": "{name}={value}",
        "commentPrefix": "#",
        "filesystemService": "spark",
        "properties" : [
          {
            "name" :  "spark.driver.memory",
            "comment": "Limiting the driver (client) memory",
            "defaultValue" : "800m"
          },
          {
            "name" :  "spark.rpc.numRetries",
            "comment": "Number of times to retry before an RPC task gives up. An RPC task will run at most times of this number.",
            "defaultValue" : "5"
          },
          {
            "name" :  "spark.rpc.retry.wait",
            "comment": "Duration for an RPC ask operation to wait before retrying.",
            "defaultValue" : "5s"
          },
          {
            "name" :  "spark.scheduler.mode",
            "comment": "The scheduling mode between jobs submitted to the same SparkContext. \nCan be FIFO or FAIR. FAIR Seem not to work well with Kubernetes",
            "defaultValue" : "FAIR"
          },
          {
            "name" :  "spark.locality.wait",
            "comment": "How long to wait to launch a data-local task before giving up and launching it on a less-local node.",
            "defaultValue" : "20s"
          },
          {
            "name" :  "spark.dynamicAllocation.executorIdleTimeout",
            "comment": "If dynamic allocation is enabled and an executor has been idle for more than this duration, the executor will be removed. \n (Caution here : small values cause issues. I have executors killed with 10s for instance)",
            "defaultValue" : "200s"
          },
          {
            "name" :  "spark.dynamicAllocation.cachedExecutorIdleTimeout",
            "comment": "If dynamic allocation is enabled and an executor which has cached data blocks has been idle for more than this duration, the executor will be removed. \n (Caution here : small values cause issues. I have executors killed with 10s for instance)",
            "defaultValue" : "300s"
          },
          {
            "name" :  "spark.executor.memory",
            "comment": "Defining default Spark executor memory allowed by Eskimo Memory Management (found in topology). \nUSE [ESKIMO_DEFAULT] to leave untouched or e.g. 800m, 1.2g, etc.",
            "defaultValue" : "[ESKIMO_DEFAULT]"
          }
        ]
      }
    ]
  },



  "spark-cli" : {
    "config": {
      "order": 14,
      "group" : "Spark",
      "name": "Client",
      "selectionLayout": {
        "row": 3,
        "col": 3
      },
      "memory": "neglectable",
      "logo" : "images/spark-runtime-logo.png",
      "icon" : "images/spark-runtime-icon.png"
    }
  },



  "flink-runtime" : {
    "config": {
      "imageName" : "flink",
      "order": 15,
      "group" : "Flink",
      "name" : "Runtime",
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "1",
          "ram": "1G"
        }
      },
      "memory": "large",
      "logo" : "images/flink-runtime-logo.png",
      "icon" : "images/flink-runtime-icon.png"
    },
    "ui": {
      "__comment_urlTemplate": "Going through Kubectl proxy.",
      "urlTemplate": "flink-runtime/{NODE_ADDRESS}/api/v1/namespaces/default/services/flink-runtime-rest:8081/proxy/#/overview",
      "__comment_proxyTargetPort": "Kubectl proxy target port",
      "proxyTargetPort" : 8001,
      "waitTime": 5000,
      "role" : "*",
      "title" : "Flink Dashboard",
      "statusPageLinktitle" : "Manage Flink Session"
    },
    "masterDetection": {
      "strategy" : "LOG_FILE",
      "logFile" : "/var/log/flink/flink-log-kubernetes-jobmanager.sh.log",
      "grep": "Starting the resource manager.",
      "timeStampExtractRexp" : "([0-9\\-]+ [0-9.:,]+).*",
      "timeStampFormat" : "yyyy-MM-dd HH:mm:ss,SSS"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "zookeeper",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "kube-master",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ],
    "editableSettings": [
      {
        "filename": "flink-conf.yaml",
        "propertyType": "variable",
        "propertyFormat": "{name}: {value}",
        "commentPrefix": "#",
        "filesystemService": "flink",
        "properties": [
          {
            "name": "jobmanager.heap.size",
            "comment": "JVM heap size for the JobManager. Use [ESKIMO_DEFAULT] to use Eskimo computed memory.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          },
          {
            "name": "taskmanager.heap.size",
            "comment": "JVM heap size for the TaskManager. Use [ESKIMO_DEFAULT] to use Eskimo computed memory.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          },
          {
            "name": "parallelism.default",
            "comment": "Default parallelism for jobs. Default value : 1.",
            "defaultValue": "1"
          },
          {
            "name": "mesos.resourcemanager.tasks.cpus",
            "comment": "CPUs to assign to the Mesos workers. Default value : 1.",
            "defaultValue": "1"
          },
          {
            "name": "mesos.resourcemanager.tasks.mem",
            "comment": "Memory to assign to the Mesos workers in MB. Default value : 1024.",
            "defaultValue": "600"
          },
          {
            "name": "taskmanager.numberOfTaskSlots",
            "comment": "The number of parallel operator or user function instances that a single TaskManager can run. Default value : 1.",
            "defaultValue": "1"
          }
        ]
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "sudo cat /var/log/flink/log/`ls -t /var/log/flink/log/ | grep flink- | head -n 1`",
        "icon": "fa-file"
      }
    ]
  },



  "flink-cli" : {
    "config": {
      "order": 16,
      "group" : "Flink",
      "name": "Client",
      "selectionLayout": {
        "row": 4,
        "col": 3
      },
      "memory": "neglectable",
      "logo" : "images/flink-logo.png",
      "icon" : "images/flink-icon.png"
    }
  },



  "logstash" : {
    "config": {
      "imageName" : "logstash",
      "order": 17,
      "kubernetes": true,
      "group" : "Elastic Stack",
      "name" : "Logstash",
      "memory": "small",
      "logo" : "images/logstash-logo.png",
      "icon" : "images/logstash-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "gluster",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": true
      },
      {
        "masterElectionStrategy": "ALL_NODES",
        "masterService": "kube-slave",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "commands" : [
      {
        "id" : "show_remote_log",
        "name" : "Show Remote Server Logs",
        "command": "cat /var/log/elasticsearch/logstash/logstash_remote.log",
        "icon": "fa-file"
      }
    ]
  },



  "logstash-cli" : {
    "config": {
      "order": 18,
      "group": "Elastic Stack",
      "name": "LS Client",
      "selectionLayout": {
        "row": 1,
        "col": 3
      },
      "memory": "neglectable",
      "logo": "images/logstash-logo.png",
      "icon": "images/logstash-icon.png"
    }
  },



  "cerebro" : {
    "config": {
      "imageName" : "cerebro",
      "order": 19,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "0.3",
          "ram": "400M"
        }
      },
      "unique": true,
      "group" : "Elastic Stack",
      "name" : "Cerebro",
      "memory": "small",
      "logo" : "images/cerebro-logo.png",
      "icon" : "images/cerebro-icon.png"
    },
    "ui": {
      "__comment_urlTemplate": "Going through Kubectl proxy.",
      "urlTemplate": "cerebro/api/v1/namespaces/default/services/cerebro:31900/proxy/#/overview?host=http:%2F%2Felasticsearch.default.svc.cluster.eskimo:9200",
      "__comment_proxyTargetPort": "Kubectl proxy target port",
      "proxyTargetPort" : 8001,
      "waitTime": 5000,
      "role" : "*",
      "title" : "Cerebro",
      "statusPageLinktitle" : "Manage your data in Elasticsearch"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "elasticsearch",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ],
    "editableSettings": [
      {
        "filename": "JVM_OPTS.sh",
        "propertyType": "REGEX",
        "propertyFormat": "{name}{value}",
        "commentPrefix": "#",
        "filesystemService": "cerebro",
        "properties": [
          {
            "name": "Xms",
            "comment": "Startup Heap Size for Cerebro java process\n[ESKIMO_DEFAULT] means memory allocator will decide of Cerebro memory share.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          },
          {
            "name": "Xmx",
            "comment": "Maximum Heap Size for Cerebro java process\n[ESKIMO_DEFAULT] means memory allocator will decide of Cerebro memory share.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          }
        ]
      }
    ]
  },



  "elasticsearch": {
    "config": {
      "imageName" : "elasticsearch",
      "order": 20,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "1",
          "ram": "1G"
        }
      },
      "group" : "Elastic Stack",
      "name" : "Elastic-Search",
      "memory": "large",
      "logo" : "images/elasticsearch-logo.png",
      "icon" : "images/elasticsearch-icon.png"
    },
    "dependencies": [
      {
        "masterElectionStrategy": "ALL_NODES",
        "masterService": "kube-slave",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      }
    ],
    "editableSettings": [
      {
        "filename": "eskimo.options",
        "propertyType": "REGEX",
        "propertyFormat": "{name}{value}",
        "commentPrefix": "#",
        "filesystemService": "elasticsearch",
        "properties": [
          {
            "name": "Xms",
            "comment": "Startup Heap Size for ES java process\n[ESKIMO_DEFAULT] means memory allocator will decide of ES memory share.\n<strong>THIS NEEDS TO BE THE SAME VALUE AS Xmx OTHERWISE ES WILL LIKELY REFUSE TO START</strong>.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          },
          {
            "name": "Xmx",
            "comment": "Maximum Heap Size for ES java process\n[ESKIMO_DEFAULT] means memory allocator will decide of ES memory share.\n<strong>THIS NEEDS TO BE THE SAME VALUE AS Xms OTHERWISE ES WILL LIKELY REFUSE TO START</strong>.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          }
        ]
      },
      {
        "filename": "elasticsearch.yml",
        "propertyType": "variable",
        "propertyFormat": "{name}: {value}",
        "commentPrefix": "#",
        "filesystemService": "elasticsearch",
        "properties": [
          {
            "name": "action.destructive_requires_name",
            "comment": "Require explicit names when deleting indices",
            "defaultValue": "false"
          }
        ]
      },
      {
        "filename": "elasticsearch-index-defaults.properties",
        "propertyType": "variable",
        "propertyFormat": "{name}={value}",
        "commentPrefix": "#",
        "filesystemService": "elasticsearch",
        "properties" : [
          {
            "name" :  "index.refresh_interval",
            "comment": "Default refresh interval on new indices. Use format such as 10s, 1m, etc. \nUSE [ESKIMO_DEFAULT] to leave ElasticSearch default value.",
            "defaultValue" : "[ESKIMO_DEFAULT]"
          },
          {
            "name" :  "index.number_of_replicas",
            "comment": "Default number of additional replicas on new indices.  \nUSE [ESKIMO_DEFAULT] to let Eskimo compute best value.",
            "defaultValue" : "[ESKIMO_DEFAULT]"
          },
          {
            "name" :  "index.number_of_shards",
            "comment": "Default number of additional replicas on new indices.  \nUSE [ESKIMO_DEFAULT] to leave ElasticSearch default value (5).",
            "defaultValue" : "[ESKIMO_DEFAULT]"
          }
        ]
      }
    ],
    "additionalEnvironment": [
      "ALL_NODES_LIST_elasticsearch"
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "cat /var/log/elasticsearch/eskimo.log",
        "icon": "fa-file"
      },
      {
        "id" : "show_search_slow_log",
        "name" : "Show Search Slow Logs",
        "command": "cat /var/log/elasticsearch/eskimo_index_search_slowlog.log",
        "icon": "fa-file"
      },
      {
        "id" : "show_index_slow_log",
        "name" : "Show Indexing Slow Logs",
        "command": "cat /var/log/elasticsearch/eskimo_index_indexing_slowlog.log",
        "icon": "fa-file"
      },
      {
        "id" : "show_gc_log",
        "name" : "Show GC Logs",
        "command": "cat /var/log/elasticsearch/gc.log",
        "icon": "fa-file"
      }
    ]
  },



  "kibana" : {
    "config": {
      "imageName" : "kibana",
      "order": 21,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "0.4",
          "ram": "600M"
        }
      },
      "unique": true,
      "group" : "Elastic Stack",
      "name" : "Kibana",
      "memory": "medium",
      "logo" : "images/kibana-logo.png",
      "icon" : "images/kibana-icon.png"
    },
    "ui": {
      "urlTemplate": "./kibana/app/home",
      "proxyTargetPort" : 31562,
      "waitTime": 8000,
      "role" : "*",
      "title" : "Kibana",
      "applyStandardProxyReplacements": false,
      "statusPageLinktitle" : "Visualize your data in Elasticsearch",
      "proxyReplacements" : [
        {
          "type" : "PLAIN",
          "source" : "'/kibana",
          "target" : "'/{PREFIX_PATH}"
        },
        {
          "type" : "PLAIN",
          "source" : "\"/kibana",
          "target" : "\"/{PREFIX_PATH}"
        },
        {
          "type" : "PLAIN",
          "source" : "&quot;/kibana",
          "target" : "&quot;/{PREFIX_PATH}"
        },
        {
          "type" : "PLAIN",
          "source" : "url(/kibana",
          "target" : "url(/{PREFIX_PATH}"
        }
      ]
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "elasticsearch",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "kube-master",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": false
      }
    ],
    "editableSettings" : [
      {
        "filename": "node.options",
        "filesystemService": "kibana",
        "propertyType": "REGEX",
        "propertyFormat": "{name}={value}",
        "commentPrefix": "#",
        "properties": [
          {
            "name": "max-old-space-size",
            "comment": "Maximum Old Space Size of the nodejs runtime for Kibana",
            "defaultValue": "[ESKIMO_DEFAULT]"
          }
        ]
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "cat /var/log/elasticsearch/kibana/kibana.log",
        "icon": "fa-file"
      }
    ]
  },



  "zeppelin" : {
    "config": {
      "imageName" : "zeppelin",
      "order": 22,
      "unique": true,
      "kubernetes": true,
      "kubeConfig": {
        "request": {
          "cpu": "1",
          "ram": "1G"
        }
      },
      "name" : "Zeppelin",
      "memory": "verylarge",
      "____comment": "We need to know about the spark executor memory to set",
      "memoryAdditional__commentedOut": ["spark-runtime"],
      "logo" : "images/zeppelin-logo.png",
      "icon" : "images/zeppelin-icon.png"
    },
    "ui": {
      "__comment_urlTemplate": "Going through Kubectl proxy.",
      "urlTemplate": "zeppelin/api/v1/namespaces/default/services/zeppelin:31008/proxy/#/",
      "__comment_proxyTargetPort": "Kubectl proxy target port",
      "proxyTargetPort" : 8001,
      "waitTime": 8000,
      "role" : "*",
      "title" : "Zeppelin",
      "statusPageLinktitle" : "Use Zeppelin for your Data Science projects",
      "proxyReplacements" : [
        {
          "type" : "PLAIN",
          "source" : "return t+\"//\"+location.hostname+\":\"+this.getPort()+e(location.pathname)+\"/ws",
          "target" : "return t + \"//\" + location.hostname + \":\" + this.getPort() + \"/{CONTEXT_PATH}ws\" + e(location.pathname) + \"/ws"
        },
        {
          "type" : "PLAIN",
          "source" : "!function(e){var t={};",
          "target" : "function noOp(){}; !function(e){var t={};"
        },
        {
          "type" : "PLAIN",
          "source" : "console.log(\"Send",
          "target" : "noOp(\"Send"
        },
        {
          "type" : "PLAIN",
          "source" : "console.log(\"Receive",
          "target" : "noOp(\"Receive"
        },
        {
          "type" : "PLAIN",
          "source" : "<li><a href=\"/zeppelin/next\">Try the new Zeppelin</a></li>",
          "target" : ""
        }
      ]
    },
    "dependencies": [
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "elasticsearch",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": false
      },
      {
        "masterElectionStrategy": "FIRST_NODE",
        "masterService": "zookeeper",
        "numberOfMasters": 1,
        "mandatory": true,
        "restart": true
      },
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "gluster",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": true
      },
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "logstash",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": true
      },
      {
        "masterElectionStrategy": "RANDOM",
        "masterService": "kafka",
        "numberOfMasters": 1,
        "mandatory": false,
        "restart": false
      }
    ],
    "editableSettings": [
      {
        "filename": "zeppelin-env.sh",
        "filesystemService": "zeppelin",
        "propertyType": "REGEX",
        "propertyFormat": "{name}{value}",
        "commentPrefix": "#",
        "properties": [
          {
            "name": "Xmx",
            "comment": "Maximum heap size memory allocated to Zeppelin process.\n[ESKIMO_DEFAULT] leaves the default memory allocation strategy decide of it.",
            "defaultValue": "[ESKIMO_DEFAULT]"
          }
        ]
      },
      {
        "filename": "eskimo_settings.conf",
        "filesystemService": "zeppelin",
        "propertyType": "variable",
        "propertyFormat": "{name}={value}",
        "commentPrefix": "#",
        "properties": [
          {
            "name": "zeppelin_note_isolation",
            "comment": "The setting 'zeppelin_note_isolation' is used to control whether interpreter processes are created and managed globally for the whole zeppelin process or per note.\nPossible values are:\n 'shared' : one single instance of every interpreter is created and shared among users and notes (better for laboratory).\n 'per_note' : one instance of interpreter is created for every note (better for production - but requires a lot of RAM).\n",
            "defaultValue": "shared"
          }
        ]
      }
    ],
    "commands" : [
      {
        "id" : "show_log",
        "name" : "Show Logs",
        "command": "sudo cat /var/log/spark/zeppelin/`ls -t /var/log/spark/zeppelin/ | grep zeppelin-eskimo- | head -n 1`",
        "icon": "fa-file"
      },
      {
        "id" : "show_shell_log",
        "name" : "Show Shell Int. Logs",
        "command": "sudo cat /var/log/spark/zeppelin/`ls -t /var/log/spark/zeppelin/ | grep zeppelin-interpreter-sh | head -n 1`",
        "icon": "fa-file"
      },
      {
        "id" : "show_python_log",
        "name" : "Show Python Int. Logs",
        "command": "sudo cat /var/log/spark/zeppelin/`ls -t /var/log/spark/zeppelin/ | grep zeppelin-interpreter-python | head -n 1`",
        "icon": "fa-file"
      },
      {
        "id" : "show_spark_log",
        "name" : "Show Spark Int. Logs",
        "command": "sudo cat /var/log/spark/zeppelin/`ls -t /var/log/spark/zeppelin/ | grep zeppelin-interpreter-spark | head -n 1`",
        "icon": "fa-file"
      },
      {
        "id" : "show_flink_log",
        "name" : "Show Flink Int. Logs",
        "command": "sudo cat /var/log/spark/zeppelin/`ls -t /var/log/spark/zeppelin/ | grep zeppelin-interpreter-flink | head -n 1`",
        "icon": "fa-file"
      }
    ]
  }

}